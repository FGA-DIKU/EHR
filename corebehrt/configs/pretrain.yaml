logging:
  level: INFO
  path: ./outputs/logs

paths:
## INPUTS
  features: ./outputs/features
  tokenized: ./outputs/tokenized
  # tokenized_file: ...
  # tokenized_pids: ...
  
  # restart_model: ... # Use for restarting from checkpoint

  ## optional
  # cohort: ... # path to cohort directory

## OUTPUTS
  model: ./outputs/pretraining # Save model/outputs to this folder
  #runs: ./outputs/pretraining # Use for generating a new model folder
  
data:
  predefined_splits: false # set to true if you want to use predefined splits for reproducibility. Expects a list (of length 1) of dicts with train, val created by select_cohort
  val_ratio: 0.2 # only used if predefined_splits is false
  dataset:
    select_ratio: 1.
    masking_ratio: .8
    replace_ratio: .1
    ignore_special_tokens: true
  truncation_len: 20
  min_len: 2
  cutoff_date:
    year: 2020
    month: 1
    day: 1

trainer_args:
  batch_size: 32
  effective_batch_size: 64
  epochs: 5
  info: true
  sampler: null
  gradient_clip: 
    clip_value: 1.0
  shuffle: true
  early_stopping: null # num_epochs or null/false

model:
  hidden_size: 96
  num_hidden_layers: 3
  num_attention_heads: 3
  intermediate_size: 64
  
  type_vocab_size: 1024 # !!! type_vocab_size should be > truncation_len//2 if sep token else >truncation len
  embedding_dropout: 0.1 
  max_position_embeddings: 512 # the longest sequence length we will use this model with
  
optimizer:
  lr: 5e-4
  eps: 1e-6

scheduler:
  _target_: transformers.get_linear_schedule_with_warmup
  num_warmup_epochs: 2
  num_training_epochs: 3

metrics:
  top1:
    _target_: corebehrt.modules.monitoring.metrics.PrecisionAtK
    topk: 1
  top10:
    _target_: corebehrt.modules.monitoring.metrics.PrecisionAtK

    topk: 10
  mlm_loss:
    _target_: corebehrt.modules.monitoring.metrics.LossAccessor
    loss_name: loss
