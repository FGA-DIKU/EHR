logging:
  level: INFO
  path: ./outputs/logs

paths:
## INPUTS
  prepared_data: ./outputs/finetuning/processed_data/
  pretrain_model: ./outputs/pretraining
  # restart_model: ... # Use for restarting from checkpoint
      
## OUTPUTS
  model: ./outputs/finetuning # Save model/outputs to this folder
  #runs: ./outputs/pretraining # Use for generating a new model folder
  
evaluate: false # evaluate best model on test sets

model:
  cls:
    _target_: ehr2vec.model.heads.ClassifierGRU
    bidirectional: true
  
outcome: # we will convert outcomes to binary based on whether at least one outcome is in the follow up window
  n_hours_censoring: -10 # censor time after index date (negative means before)
  n_hours_start_follow_up: 1 # start follow up (considering outcomes) time after index date (negative means before)
  n_hours_end_follow_up: null # end follow up (considering outcomes) time after index date (negative means before)

trainer_args:
  sampler: true
  sample_weight_function:
    _target_: corebehrt.evaluation.utils.inverse_sqrt # function to calculate sample weights
  batch_size: 128
  val_batch_size: 128
  effective_batch_size: 128
  epochs: 1
  info: true
  gradient_clip: 
    clip_value: 1.0
  shuffle: true
  checkpoint_frequency: 1
  early_stopping: 20
  stopping_criterion: roc_auc
  
  # Freezing options
  n_layers_to_freeze: 1
  unfreeze_on_plateau: true # unfreeze all layers if the performance is less than plateau_threshold 
  unfreeze_at_epoch: 2 # if unfrezze_on_plateau is true, whichever condition is met first
  plateau_threshold: 0.01 
  reset_patience_after_unfreeze: true # reset early stopping counter after unfreezing

  
optimizer:
  lr: 5e-4
  eps: 1e-6

scheduler:
  _target_: transformers.get_linear_schedule_with_warmup
  num_warmup_steps: 10
  num_training_steps: 100

metrics:
  accuracy:
    _target_: corebehrt.modules.monitoring.metrics.Accuracy
    threshold: 0.6
  roc_auc:
    _target_: corebehrt.modules.monitoring.metrics.ROC_AUC

  pr_auc:
    _target_: corebehrt.modules.monitoring.metrics.PR_AUC
  precentage_positives:
    _target_: corebehrt.modules.monitoring.metrics.Percentage_Positives

  mean_probability:
    _target_: corebehrt.modules.monitoring.metrics.Mean_Probability
  true_positives:
    _target_: corebehrt.modules.monitoring.metrics.True_Positives

  true_negatives:
    _target_: corebehrt.modules.monitoring.metrics.True_Negatives
  false_positives:
    _target_: corebehrt.modules.monitoring.metrics.False_Positives

  false_negatives:
    _target_: corebehrt.modules.monitoring.metrics.False_Negatives
  
  

 
